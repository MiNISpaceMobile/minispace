// <auto-generated />
using System;
using Infrastructure.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("CommentStudent", b =>
                {
                    b.Property<ulong>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("LikersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentId", "LikersId");

                    b.HasIndex("LikersId");

                    b.ToTable("CommentStudent");
                });

            modelBuilder.Entity("Domain.DataModel.Comment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("InResponseToId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("AuthorId");

                    b.HasIndex("InResponseToId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Domain.DataModel.Event", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("OrganizerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Domain.DataModel.Post", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Domain.DataModel.Report", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("ResponderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<ulong>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponderId");

                    b.ToTable("Report");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Report");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.DataModel.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("SaltedPasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.Property<ulong>("InterestedId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SubscribedEventsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InterestedId", "SubscribedEventsId");

                    b.HasIndex("SubscribedEventsId");

                    b.ToTable("EventStudent");
                });

            modelBuilder.Entity("EventStudent1", b =>
                {
                    b.Property<ulong>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ParticipantsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("EventStudent1");
                });

            modelBuilder.Entity("StudentStudent", b =>
                {
                    b.Property<ulong>("FriendsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FriendsId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentStudent");
                });

            modelBuilder.Entity("Domain.DataModel.CommentReport", b =>
                {
                    b.HasBaseType("Domain.DataModel.Report");

                    b.HasIndex("TargetId");

                    b.HasDiscriminator().HasValue("CommentReport");
                });

            modelBuilder.Entity("Domain.DataModel.EventReport", b =>
                {
                    b.HasBaseType("Domain.DataModel.Report");

                    b.HasIndex("TargetId");

                    b.HasDiscriminator().HasValue("EventReport");
                });

            modelBuilder.Entity("Domain.DataModel.PostReport", b =>
                {
                    b.HasBaseType("Domain.DataModel.Report");

                    b.HasIndex("TargetId");

                    b.HasDiscriminator().HasValue("PostReport");
                });

            modelBuilder.Entity("Domain.DataModel.Administrator", b =>
                {
                    b.HasBaseType("Domain.DataModel.User");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Domain.DataModel.Student", b =>
                {
                    b.HasBaseType("Domain.DataModel.User");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailNotification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CommentStudent", b =>
                {
                    b.HasOne("Domain.DataModel.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataModel.Student", null)
                        .WithMany()
                        .HasForeignKey("LikersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DataModel.Comment", b =>
                {
                    b.HasOne("Domain.DataModel.Student", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.DataModel.Comment", "InResponseTo")
                        .WithMany("Responses")
                        .HasForeignKey("InResponseToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.DataModel.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("InResponseTo");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.DataModel.Event", b =>
                {
                    b.HasOne("Domain.DataModel.Student", "Organizer")
                        .WithMany("OrganizedEvents")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Domain.DataModel.Post", b =>
                {
                    b.HasOne("Domain.DataModel.Student", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.DataModel.Event", "Event")
                        .WithMany("Posts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.DataModel.Report", b =>
                {
                    b.HasOne("Domain.DataModel.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.DataModel.Administrator", "Responder")
                        .WithMany()
                        .HasForeignKey("ResponderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.HasOne("Domain.DataModel.Student", null)
                        .WithMany()
                        .HasForeignKey("InterestedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataModel.Event", null)
                        .WithMany()
                        .HasForeignKey("SubscribedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventStudent1", b =>
                {
                    b.HasOne("Domain.DataModel.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataModel.Student", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentStudent", b =>
                {
                    b.HasOne("Domain.DataModel.Student", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataModel.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DataModel.CommentReport", b =>
                {
                    b.HasOne("Domain.DataModel.Comment", "ReportedComment")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedComment");
                });

            modelBuilder.Entity("Domain.DataModel.EventReport", b =>
                {
                    b.HasOne("Domain.DataModel.Event", "ReportedEvent")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedEvent");
                });

            modelBuilder.Entity("Domain.DataModel.PostReport", b =>
                {
                    b.HasOne("Domain.DataModel.Post", "ReportedPost")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedPost");
                });

            modelBuilder.Entity("Domain.DataModel.Comment", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Domain.DataModel.Event", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.DataModel.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.DataModel.Student", b =>
                {
                    b.Navigation("OrganizedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
